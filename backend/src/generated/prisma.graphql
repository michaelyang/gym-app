# source: https://weirdflex-prod-cecc67497b.herokuapp.com/weirdflex-prod/prod
# timestamp: Mon Mar 11 2019 03:41:22 GMT-0400 (EDT)

type AggregateRoutine {
  count: Int!
}

type AggregateRoutineSession {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWorkout {
  count: Int!
}

type AggregateWorkoutSession {
  count: Int!
}

type AggregateWorkoutSet {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createRoutineSession(data: RoutineSessionCreateInput!): RoutineSession!
  createWorkoutSet(data: WorkoutSetCreateInput!): WorkoutSet!
  createWorkout(data: WorkoutCreateInput!): Workout!
  createUser(data: UserCreateInput!): User!
  createWorkoutSession(data: WorkoutSessionCreateInput!): WorkoutSession!
  createRoutine(data: RoutineCreateInput!): Routine!
  updateWorkout(data: WorkoutUpdateInput!, where: WorkoutWhereUniqueInput!): Workout
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateRoutine(data: RoutineUpdateInput!, where: RoutineWhereUniqueInput!): Routine
  deleteWorkout(where: WorkoutWhereUniqueInput!): Workout
  deleteUser(where: UserWhereUniqueInput!): User
  deleteRoutine(where: RoutineWhereUniqueInput!): Routine
  upsertWorkout(where: WorkoutWhereUniqueInput!, create: WorkoutCreateInput!, update: WorkoutUpdateInput!): Workout!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertRoutine(where: RoutineWhereUniqueInput!, create: RoutineCreateInput!, update: RoutineUpdateInput!): Routine!
  updateManyRoutineSessions(data: RoutineSessionUpdateManyMutationInput!, where: RoutineSessionWhereInput): BatchPayload!
  updateManyWorkoutSets(data: WorkoutSetUpdateManyMutationInput!, where: WorkoutSetWhereInput): BatchPayload!
  updateManyWorkouts(data: WorkoutUpdateManyMutationInput!, where: WorkoutWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyRoutines(data: RoutineUpdateManyMutationInput!, where: RoutineWhereInput): BatchPayload!
  deleteManyRoutineSessions(where: RoutineSessionWhereInput): BatchPayload!
  deleteManyWorkoutSets(where: WorkoutSetWhereInput): BatchPayload!
  deleteManyWorkouts(where: WorkoutWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyWorkoutSessions(where: WorkoutSessionWhereInput): BatchPayload!
  deleteManyRoutines(where: RoutineWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  routineSessions(where: RoutineSessionWhereInput, orderBy: RoutineSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RoutineSession]!
  workoutSets(where: WorkoutSetWhereInput, orderBy: WorkoutSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkoutSet]!
  workouts(where: WorkoutWhereInput, orderBy: WorkoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workout]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  workoutSessions(where: WorkoutSessionWhereInput, orderBy: WorkoutSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkoutSession]!
  routines(where: RoutineWhereInput, orderBy: RoutineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Routine]!
  workout(where: WorkoutWhereUniqueInput!): Workout
  user(where: UserWhereUniqueInput!): User
  routine(where: RoutineWhereUniqueInput!): Routine
  routineSessionsConnection(where: RoutineSessionWhereInput, orderBy: RoutineSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoutineSessionConnection!
  workoutSetsConnection(where: WorkoutSetWhereInput, orderBy: WorkoutSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkoutSetConnection!
  workoutsConnection(where: WorkoutWhereInput, orderBy: WorkoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkoutConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  workoutSessionsConnection(where: WorkoutSessionWhereInput, orderBy: WorkoutSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkoutSessionConnection!
  routinesConnection(where: RoutineWhereInput, orderBy: RoutineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoutineConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Routine implements Node {
  id: ID!
  name: String!
  workouts(where: WorkoutWhereInput, orderBy: WorkoutOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Workout!]
}

"""A connection to a list of items."""
type RoutineConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoutineEdge]!
  aggregate: AggregateRoutine!
}

input RoutineCreateInput {
  name: String!
  workouts: WorkoutCreateManyInput
}

input RoutineCreateManyInput {
  create: [RoutineCreateInput!]
  connect: [RoutineWhereUniqueInput!]
}

"""An edge in a connection."""
type RoutineEdge {
  """The item at the end of the edge."""
  node: Routine!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoutineOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoutinePreviousValues {
  id: ID!
  name: String!
}

input RoutineScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RoutineScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoutineScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoutineScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type RoutineSession {
  datetime: DateTime!
  user: User!
  workoutSessions(where: WorkoutSessionWhereInput, orderBy: WorkoutSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkoutSession!]
}

"""A connection to a list of items."""
type RoutineSessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoutineSessionEdge]!
  aggregate: AggregateRoutineSession!
}

input RoutineSessionCreateInput {
  datetime: DateTime!
  user: UserCreateOneInput!
  workoutSessions: WorkoutSessionCreateManyInput
}

"""An edge in a connection."""
type RoutineSessionEdge {
  """The item at the end of the edge."""
  node: RoutineSession!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoutineSessionOrderByInput {
  datetime_ASC
  datetime_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoutineSessionPreviousValues {
  datetime: DateTime!
}

type RoutineSessionSubscriptionPayload {
  mutation: MutationType!
  node: RoutineSession
  updatedFields: [String!]
  previousValues: RoutineSessionPreviousValues
}

input RoutineSessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoutineSessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoutineSessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoutineSessionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoutineSessionWhereInput
}

input RoutineSessionUpdateManyMutationInput {
  datetime: DateTime
}

input RoutineSessionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoutineSessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoutineSessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoutineSessionWhereInput!]
  datetime: DateTime

  """All values that are not equal to given value."""
  datetime_not: DateTime

  """All values that are contained in given list."""
  datetime_in: [DateTime!]

  """All values that are not contained in given list."""
  datetime_not_in: [DateTime!]

  """All values less than the given value."""
  datetime_lt: DateTime

  """All values less than or equal the given value."""
  datetime_lte: DateTime

  """All values greater than the given value."""
  datetime_gt: DateTime

  """All values greater than or equal the given value."""
  datetime_gte: DateTime
  user: UserWhereInput
  workoutSessions_every: WorkoutSessionWhereInput
  workoutSessions_some: WorkoutSessionWhereInput
  workoutSessions_none: WorkoutSessionWhereInput
}

type RoutineSubscriptionPayload {
  mutation: MutationType!
  node: Routine
  updatedFields: [String!]
  previousValues: RoutinePreviousValues
}

input RoutineSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoutineSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoutineSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoutineSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoutineWhereInput
}

input RoutineUpdateDataInput {
  name: String
  workouts: WorkoutUpdateManyInput
}

input RoutineUpdateInput {
  name: String
  workouts: WorkoutUpdateManyInput
}

input RoutineUpdateManyDataInput {
  name: String
}

input RoutineUpdateManyInput {
  create: [RoutineCreateInput!]
  connect: [RoutineWhereUniqueInput!]
  disconnect: [RoutineWhereUniqueInput!]
  delete: [RoutineWhereUniqueInput!]
  update: [RoutineUpdateWithWhereUniqueNestedInput!]
  updateMany: [RoutineUpdateManyWithWhereNestedInput!]
  deleteMany: [RoutineScalarWhereInput!]
  upsert: [RoutineUpsertWithWhereUniqueNestedInput!]
}

input RoutineUpdateManyMutationInput {
  name: String
}

input RoutineUpdateManyWithWhereNestedInput {
  where: RoutineScalarWhereInput!
  data: RoutineUpdateManyDataInput!
}

input RoutineUpdateWithWhereUniqueNestedInput {
  where: RoutineWhereUniqueInput!
  data: RoutineUpdateDataInput!
}

input RoutineUpsertWithWhereUniqueNestedInput {
  where: RoutineWhereUniqueInput!
  update: RoutineUpdateDataInput!
  create: RoutineCreateInput!
}

input RoutineWhereInput {
  """Logical AND on all given filters."""
  AND: [RoutineWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoutineWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoutineWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  workouts_every: WorkoutWhereInput
  workouts_some: WorkoutWhereInput
  workouts_none: WorkoutWhereInput
}

input RoutineWhereUniqueInput {
  id: ID
}

type Subscription {
  routineSession(where: RoutineSessionSubscriptionWhereInput): RoutineSessionSubscriptionPayload
  workoutSet(where: WorkoutSetSubscriptionWhereInput): WorkoutSetSubscriptionPayload
  workout(where: WorkoutSubscriptionWhereInput): WorkoutSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  workoutSession(where: WorkoutSessionSubscriptionWhereInput): WorkoutSessionSubscriptionPayload
  routine(where: RoutineSubscriptionWhereInput): RoutineSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  routines(where: RoutineWhereInput, orderBy: RoutineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Routine!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  routines: RoutineCreateManyInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  routines: RoutineUpdateManyInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  routines_every: RoutineWhereInput
  routines_some: RoutineWhereInput
  routines_none: RoutineWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Workout implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type WorkoutConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkoutEdge]!
  aggregate: AggregateWorkout!
}

input WorkoutCreateInput {
  name: String!
}

input WorkoutCreateManyInput {
  create: [WorkoutCreateInput!]
  connect: [WorkoutWhereUniqueInput!]
}

input WorkoutCreateOneInput {
  create: WorkoutCreateInput
  connect: WorkoutWhereUniqueInput
}

"""An edge in a connection."""
type WorkoutEdge {
  """The item at the end of the edge."""
  node: Workout!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WorkoutOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkoutPreviousValues {
  id: ID!
  name: String!
}

input WorkoutScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkoutScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkoutScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkoutScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

type WorkoutSession {
  workout: Workout!
  workoutsets(where: WorkoutSetWhereInput, orderBy: WorkoutSetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WorkoutSet!]
}

"""A connection to a list of items."""
type WorkoutSessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkoutSessionEdge]!
  aggregate: AggregateWorkoutSession!
}

input WorkoutSessionCreateInput {
  workout: WorkoutCreateOneInput!
  workoutsets: WorkoutSetCreateManyInput
}

input WorkoutSessionCreateManyInput {
  create: [WorkoutSessionCreateInput!]
}

"""An edge in a connection."""
type WorkoutSessionEdge {
  """The item at the end of the edge."""
  node: WorkoutSession!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WorkoutSessionOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkoutSessionSubscriptionPayload {
  mutation: MutationType!
  node: WorkoutSession
  updatedFields: [String!]
}

input WorkoutSessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkoutSessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkoutSessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkoutSessionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WorkoutSessionWhereInput
}

input WorkoutSessionWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkoutSessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkoutSessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkoutSessionWhereInput!]
  workout: WorkoutWhereInput
  workoutsets_every: WorkoutSetWhereInput
  workoutsets_some: WorkoutSetWhereInput
  workoutsets_none: WorkoutSetWhereInput
}

type WorkoutSet {
  reps: Int!
  weight: Int!
}

"""A connection to a list of items."""
type WorkoutSetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkoutSetEdge]!
  aggregate: AggregateWorkoutSet!
}

input WorkoutSetCreateInput {
  reps: Int!
  weight: Int!
}

input WorkoutSetCreateManyInput {
  create: [WorkoutSetCreateInput!]
}

"""An edge in a connection."""
type WorkoutSetEdge {
  """The item at the end of the edge."""
  node: WorkoutSet!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WorkoutSetOrderByInput {
  reps_ASC
  reps_DESC
  weight_ASC
  weight_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WorkoutSetPreviousValues {
  reps: Int!
  weight: Int!
}

type WorkoutSetSubscriptionPayload {
  mutation: MutationType!
  node: WorkoutSet
  updatedFields: [String!]
  previousValues: WorkoutSetPreviousValues
}

input WorkoutSetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkoutSetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkoutSetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkoutSetSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WorkoutSetWhereInput
}

input WorkoutSetUpdateManyMutationInput {
  reps: Int
  weight: Int
}

input WorkoutSetWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkoutSetWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkoutSetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkoutSetWhereInput!]
  reps: Int

  """All values that are not equal to given value."""
  reps_not: Int

  """All values that are contained in given list."""
  reps_in: [Int!]

  """All values that are not contained in given list."""
  reps_not_in: [Int!]

  """All values less than the given value."""
  reps_lt: Int

  """All values less than or equal the given value."""
  reps_lte: Int

  """All values greater than the given value."""
  reps_gt: Int

  """All values greater than or equal the given value."""
  reps_gte: Int
  weight: Int

  """All values that are not equal to given value."""
  weight_not: Int

  """All values that are contained in given list."""
  weight_in: [Int!]

  """All values that are not contained in given list."""
  weight_not_in: [Int!]

  """All values less than the given value."""
  weight_lt: Int

  """All values less than or equal the given value."""
  weight_lte: Int

  """All values greater than the given value."""
  weight_gt: Int

  """All values greater than or equal the given value."""
  weight_gte: Int
}

type WorkoutSubscriptionPayload {
  mutation: MutationType!
  node: Workout
  updatedFields: [String!]
  previousValues: WorkoutPreviousValues
}

input WorkoutSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkoutSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkoutSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkoutSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WorkoutWhereInput
}

input WorkoutUpdateDataInput {
  name: String
}

input WorkoutUpdateInput {
  name: String
}

input WorkoutUpdateManyDataInput {
  name: String
}

input WorkoutUpdateManyInput {
  create: [WorkoutCreateInput!]
  connect: [WorkoutWhereUniqueInput!]
  disconnect: [WorkoutWhereUniqueInput!]
  delete: [WorkoutWhereUniqueInput!]
  update: [WorkoutUpdateWithWhereUniqueNestedInput!]
  updateMany: [WorkoutUpdateManyWithWhereNestedInput!]
  deleteMany: [WorkoutScalarWhereInput!]
  upsert: [WorkoutUpsertWithWhereUniqueNestedInput!]
}

input WorkoutUpdateManyMutationInput {
  name: String
}

input WorkoutUpdateManyWithWhereNestedInput {
  where: WorkoutScalarWhereInput!
  data: WorkoutUpdateManyDataInput!
}

input WorkoutUpdateWithWhereUniqueNestedInput {
  where: WorkoutWhereUniqueInput!
  data: WorkoutUpdateDataInput!
}

input WorkoutUpsertWithWhereUniqueNestedInput {
  where: WorkoutWhereUniqueInput!
  update: WorkoutUpdateDataInput!
  create: WorkoutCreateInput!
}

input WorkoutWhereInput {
  """Logical AND on all given filters."""
  AND: [WorkoutWhereInput!]

  """Logical OR on all given filters."""
  OR: [WorkoutWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WorkoutWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input WorkoutWhereUniqueInput {
  id: ID
}
